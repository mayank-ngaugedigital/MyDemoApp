import groovy.json.JsonSlurperClassic

node {
    def BUILD_NUMBER = env.BUILD_NUMBER
    def RUN_ARTIFACT_DIR = "tests/${BUILD_NUMBER}"

    // DEV & QA Git Variables
    def DEV_GIT_REPO_URL = "https://github.com/mayank-ngaugedigital/MyDemoApp"
    def QA_GIT_REPO_URL = "https://github.com/mayank-ngaugedigital/MyQA_Repository.git"
    def GIT_BRANCH = "main"

    // Salesforce Variables
    def QA_HUB_ORG = "test-jpzd4qsbxycg@example.com"
    def QA_SFDC_HOST = "https://login.salesforce.com/"
    def QA_JWT_KEY_CRED_ID = "b57e8c8c-1d7b-4968-86ef-a1b86e39504f"
    def QA_CONNECTED_APP_CONSUMER_KEY = "3MVG9W_ynb0f8co7mSJIX.c3zAZeQCvHkCwRZnmYUQ0FBm1NHRC8AhweqWnSgvGA_A9qL6sZKWc1FVZJ2OW9y"

    def toolbelt = "C:/Program Files/sf/bin/sfdx.cmd"

    stage('Clone DEV Repository') {
        git(
            url: DEV_GIT_REPO_URL,
            branch: GIT_BRANCH,
            changelog: true,
            poll: true
        )
    }

    withCredentials([file(credentialsId: QA_JWT_KEY_CRED_ID, variable: 'jwt_key_file')]) {
        stage('Deploy to QA Org') {
            def rc = bat returnStatus: true, script: "\"${toolbelt}\" org login jwt --client-id ${QA_CONNECTED_APP_CONSUMER_KEY} --username ${QA_HUB_ORG} --jwt-key-file \"${jwt_key_file}\" --set-default-dev-hub --instance-url ${QA_SFDC_HOST}"
            if (rc != 0) { error 'QA Org authorization failed' }
            println "Authorization to QA Org successful."

            def deployCmd = "\"${toolbelt}\" project deploy start --manifest manifest/package.xml --target-org ${QA_HUB_ORG}"
            def deployOutput = bat returnStdout: true, script: deployCmd
            println "Deployment to QA Output:\n${deployOutput}"
        }
    }

    withCredentials([file(credentialsId: QA_JWT_KEY_CRED_ID, variable: 'jwt_key_file')]) {
        stage('Retrieve Metadata from QA Org') {
            def rc = bat returnStatus: true, script: "\"${toolbelt}\" org login jwt --client-id ${QA_CONNECTED_APP_CONSUMER_KEY} --username ${QA_HUB_ORG} --jwt-key-file \"${jwt_key_file}\" --set-default-dev-hub --instance-url ${QA_SFDC_HOST}"
            if (rc != 0) { error 'QA Org re-authorization failed' }
            println "Re-authorized QA Org for metadata retrieval."

            def retrieveCmd = "\"${toolbelt}\" project retrieve start --manifest manifest/package.xml --target-org ${QA_HUB_ORG} --output-dir retrieved-metadata"
            def retrieveOutput = bat returnStdout: true, script: retrieveCmd
            println "Metadata Retrieved:\n${retrieveOutput}"
        }
    }

    stage("Push Retrieved Metadata to QA Repository") {
        withCredentials([usernamePassword(credentialsId: 'QA_GIT_CRED_ID', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
            bat """
            cd retrieved-metadata
            git init
            git config user.name "mayank-ngaugedigital"
            git config user.email "mayank.joshi@ngauge.digital"
            git remote remove origin || echo "No existing origin to remove"
            git remote add origin https://github.com/mayank-ngaugedigital/MyQA_Repository.git
            git add .
            git commit -m "Auto commit: Retrieved metadata from QA Org - Build ${BUILD_NUMBER}"
            git branch -M ${GIT_BRANCH}
            git push -u origin ${GIT_BRANCH} --force
            """
        }
    }

    post {
        always {
            deleteDir()
        }
    }
}
